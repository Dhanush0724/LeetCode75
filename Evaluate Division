from collections import defaultdict, deque

class Solution(object):
    def calcEquation(self, equations, values, queries):
        """
        :type equations: List[List[str]]
        :type values: List[float]
        :type queries: List[List[str]]
        :rtype: List[float]
        """
        
        adj = defaultdict(list)
        for i, eq in enumerate(equations):
            a, b = eq
            adj[a].append((b, values[i]))
            adj[b].append((a, 1 / values[i]))

        
        def bfs(src, target):
            if src not in adj or target not in adj:
                return -1.0
            q, visit = deque([(src, 1.0)]), set([src])
            while q:
                node, weight = q.popleft()
                if node == target:
                    return weight
                for nei, nei_weight in adj[node]:
                    if nei not in visit:
                        visit.add(nei)
                        q.append((nei, weight * nei_weight))
            return -1.0
        
        
        return [bfs(q[0], q[1]) for q in queries]
