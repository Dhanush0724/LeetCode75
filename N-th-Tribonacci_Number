class Solution(object):
    def tribonacci(self, n):
        """
        :type n: int
        :rtype: int
        """
        ### Recursion
        # if n== 0:
        #     return 0
        # if n == 1 or n==2:
        #     return 1
        
        # return self.tribonacci(n-1) + self.tribonacci(n-2) +self.tribonacci (n-3) 
        ### Memorization

        # dp = [-1]*(n+1)
        # def f(n):
        #     if n == 0:
        #         return 0
        #     if n == 1 or n ==2:
        #         return 1
        #     if dp[n] != -1:
        #         return  dp[n]
        #     dp[n] = f(n-1) + f(n-2) +f (n-3)
        #     return dp[n]
        # return f(n)
        

        ### TABULATION

        if n == 0:
            return 0
        if n == 1 or n == 2:
            return 1
        
        dp = [0]*(n+1)

        dp[1] = 1
        dp[2] = 1

        for i in range(3,n+1):
            dp[i] = dp[i-1] + dp[i-2] + dp[i-3]

        return dp[n]
