class Solution(object):
    def maxProfit(self, prices, fee):

        # def f(ind,buy,dp):

        #     if ind == len(prices):
        #         return 0
            
        #     if dp[ind][buy]!=-1:
        #         return dp[ind][buy]
            
        #     if buy == 0:
        #         profit = max(f(ind+1,0,dp),-prices[ind]+f(ind+1,1,dp))
            
        #     if buy == 1:
        #         profit = max(f(ind+1,1,dp),prices[ind]-fee+f(ind+1,0,dp))
            
        #     dp[ind][buy] = profit
        #     return dp[ind][buy]
        
        # n = len(prices)
        # if n == 0:
        #     return 0
        # dp = [[-1 for _ in range(2)] for _ in range(n)]
        # return f(0,0,dp)

        # n = len(prices)
        # if n == 0:
        #     return 0
        # dp = [[0 for _ in range(2)] for _ in range(n+1)]

        # for ind in range(n-1,-1,-1):
        #     for buy in range(2):

        #         if buy == 0:

        #             dp[ind][buy] = max(dp[ind+1][0],-prices[ind]+dp[ind+1][1])
                
        #         else :

        #             dp[ind][buy] = max(dp[ind+1][1],prices[ind]-fee+dp[ind+1][0])
                
                
        
        # return dp[0][0]

        n = len(prices)

        if n == 0:
            return 0
        
        x = 0
        y = 0

        for ind in range(n-1,-1,-1):

            z = max(x,-prices[ind]+y)

            z1 = max(y,prices[ind]-fee+x)

            x = z
            y = z1
        return x
