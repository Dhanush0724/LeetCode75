class Solution(object):
    def minDistance(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: int
        """
        def f(s1,s2,i,j,dp) :
            if i <0 :
                return j+1
            if j <0 :
                return i+1
            if dp[i][j]  != -1:
                return dp[i][j]

            if s1[i] == s2[j] :
                dp[i][j] = f(s1,s2,i-1,j-1,dp)

            else :

                dp[i][j] = 1 + min(
                    f(s1,s2,i-1,j-1,dp),
                    f(s1,s2,i,j-1,dp),
                    f(s1,s2,i-1,j,dp)
                )

            return dp[i][j] 

        n = len(word1)
        m = len(word2)
        dp = [[-1 for _ in range(m)] for _ in range(n)]
        return f(word1,word2,n-1,m-1,dp)
        # n = len(word1)
        # m = len(word2)

        # dp = [[0 for _ in range(m+1)] for _ in range(n+1)]

        # for i in range(n+1):
        #     dp[i][0] = i
        # for j in range(m+1):
        #     dp[0][j] = j
        
        # for i in range(1,n+1):
        #     for j in range(1,m+1):

        #         if word1[i-1] == word2[j-1] :
        #             dp[i][j] = dp[i-1][j-1]
                
        #         else :
        #             dp[i][j] = 1+ min(dp[i-1][j-1],dp[i-1][j],dp[i][j-1])
        
        # return dp[n][m]
